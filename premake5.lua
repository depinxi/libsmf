-- 
-- Option --location=path
-- 	Set the location of generated build scripts 
-- 
newoption {
	trigger = "location",
	description = "Path of generated build scripts",
	value = "path",
	default = "build/premake" 
}

-- 
-- Option --use-glib
-- 	Use and link with the real glib library.
--	glib build and link instructions must be provided
--  through CFLAGS / LDFLAGS
-- 
newoption {
	trigger = "use-glib",
	description = "Use and link with the read glib library",
	value = "yes|no",
	default = "no" 
}

-- 
-- Option --use-config
-- 	Use a config.h file.
--	The config.h file can be generated with the premake action "config"
-- 	or manually
-- 
newoption {
	trigger = "use-config",
	description = "Use a config.h file",
	value = "yes|no",
	default = "no" 
}

--
-- Action config
--	Generate a basic config.h file
--
newaction {
	trigger = "config",
	description = "Create config.h",
	onWorkspace = function(wks)
		for cfg in premake.workspace.eachconfig (wks) 
		do
			local filename = path.join (cfg.location, cfg.shortname, "include/config.h")
			local ctx = {
				["cfg"] = cfg,
				["filename"] = filename 
			}
			premake.generate (ctx, nil, function (ctx)
				premake.w ("/** Generated by premake */")
				local version = "1.3.1"
				for k, v in pairs ({
					PACKAGE_VERSION = '"'..version..'"',
					VERSION = '"'..version..'"'
				}) do
					premake.w ("#define " .. k .. " " .. v)
				end
				premake.w("")
			end)
		end
	end 
}

workspace "smf"
do
	configurations {"Debug", "Release" }
	location (_OPTIONS["location"])
	
	include "scripts/premake/libsmf.lua"
	include "scripts/premake/smfsh.lua"
end